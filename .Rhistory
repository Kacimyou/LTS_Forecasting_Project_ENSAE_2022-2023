require(forecast)
require(zoo)
require(tseries)
require(fUnitRoots)
require(forecast)
require(zoo)
require(tseries)
require(forecast)
require(zoo)
require(tseries)
require(fUnitRoots)
########################################
###      Cleaning the workspace      ###
########################################
rm(list=(objects()))
########################################
### Import the data and set the path ###
########################################
# path <- "C:\\Users\\youns\\Documents\\GitHub\\LTS_Forecasting_Project_ENSAE_2022-2023"
path <- "C:\\Users\\mira_\\Documents\\GitHub\\LTS_Forecasting_Project_ENSAE_2022-2023"
########################################
### Import the data and set the path ###
########################################
path <- "C:\\Users\\Home\\Documents\\GitHub\\LTS_Forecasting_Project_ENSAE_2022-2023"
#path <- "C:\\Users\\mira_\\Documents\\GitHub\\LTS_Forecasting_Project_ENSAE_2022-2023"
setwd(path) #definit l'espace de travail (working directory ou "wd")
#path <- "C:\\Users\\mira_\\Documents\\GitHub\\LTS_Forecasting_Project_ENSAE_2022-2023"
setwd(path) #definit l'espace de travail (working directory ou "wd")
getwd() #affiche le wd
list.files() #liste les elements du wd
datafile <- "valeurs_mensuelles.csv" #definit le fichier de donnees
data <- read.csv(datafile,sep=";") #importe un fichier .csv dans un objet de classe data.frame
dates_char <- dates_char[4:T]
T <- length(dates_char)
dates <- as.yearmon(seq(from=2008+10/12, to=2023+3/12, by=1/12))
dates_char <- as.character(data[[1]])
T <- length(dates_char)
dates_char <- dates_char[4:T]
dates_char[1]
tail(dates_char,1)
dates <- as.yearmon(seq(from=2008+10/12, to=2023+3/12, by=1/12))
y <-zoo(data[[2]][4:T], order.by=dates)
y_num = as.numeric(y)
y_num = zoo(y_num, order.by=dates)
y_diff = diff(y_num, differences = 1)#first difference
y_diff = zoo(y_diff, order.by=dates)
plot(y, ylim =c(60,160))
graphics.off()
plot(y, ylim =c(60,160))
graphics.off()
plot(y_diff)
graphics.off()
### Useful function ###
adfTest_valid <-
function(series,kmax,type){ #ADF tests until no more autocorrelated residuals
k <- 0
noautocorr <- 0
while (noautocorr==0){
cat(paste0("ADF with ",k, " lags: residuals OK? "))
adf <- adfTest(series,lags=k,type=type)
pvals <- Qtests(adf@test$lm$residuals,24,fitdf=length(adf@test$lm$coefficients))[,2]
if (sum(pvals<0.05,na.rm=T) == 0) {
noautocorr <- 1; cat("OK \n")}
else cat("nope \n")
k <- k + 1
}
return(adf)
}
Qtests <- function(series, k, fitdf=0) {
pvals <- apply(matrix(1:k), 1, FUN=function(l) {
pval <- if (l<=fitdf) NA else Box.test(series, lag=l, type="Ljung-Box", fitdf=fitdf)$p.value
return(c("lag"=l,"pval"=pval))
})
return(t(pvals))
}
# Letâ€™s regress y on its dates to check :
summary(lm( formula = y ~ dates))
adf <- adfTest(y_num, lag=0, type="ct") # ct here take into account the fact that y has an intercept and non zero trend.
Qtests(adf@test$lm$residuals,24,length(adf@test$lm$coefficients))
adf <- adfTest_valid(y_num,24, type="ct") # ct here take into account the fact that y has an intercept and non zero trend.
adf
summary(lm( formula = y_diff ~ dates[-1]))
adf <- adfTest(y_num, lag=0, type="ct") # ct here take into account the fact that y has an intercept and non zero trend.
Qtests(adf@test$lm$residuals,24,length(adf@test$lm$coefficients))
Qtests(adf@test$lm$residuals,24,length(adf@test$lm$coefficients))
adf <- adfTest_valid(y_num,24, type="ct") # ct here take into account the fact that y has an intercept and non zero trend.
adf
summary(lm( formula = y_diff ~ dates[-1]))
summary(lm( formula = y_diff ~ dates[-1]))
adf <- adfTest_valid(y_diff,24, type="nc") # nc here take into account the fact that y has no intercept and zero trend.
#It was necessary to include 1 lags in the ADF test
adf
plot(cbind(y_num,y_diff))
graphics.off()
### Identification of p and q ###
par(mfrow=c(1,2)) #puts the graphs into 1 column and 2 lines
acf(y_diff)
pacf(y_diff)
graphics.off()
signif <- function(estim){
coef <- estim$coef
se <- sqrt(diag(estim$var.coef))
t <- coef/se
pval <- (1-pnorm(abs(t)))*2
return(rbind(coef,se,pval))
}
signif <- function(estim){
coef <- estim$coef
se <- sqrt(diag(estim$var.coef))
t <- coef/se
pval <- (1-pnorm(abs(t)))*2
return(rbind(coef,se,pval))
}
arimafit <- function(estim){
adjust <- round(signif(estim),3)
pvals <- Qtests(estim$residuals,24,length(estim$coef)-1)
pvals <- matrix(apply(matrix(1:24,nrow=6),2,function(c) round(pvals[c,],3)),nrow=6)
colnames(pvals) <- rep(c("lag", "pval"),4)
cat("Nullity test of the coefficients :\n")
print(adjust)
cat("\n Test of absence of residuals autocorrelation : \n")
print(pvals)
}
estim <- Arima(y_diff,c(1,0,0)); arimafit(estim) # Nope:The model is not valid
estim <- Arima(y_diff,c(2,0,0)); arimafit(estim) # OK:The model is well adjusted and valid
ar2 <- estim
estim <- Arima(y_diff,c(0,0,1)); arimafit(estim) # Nope:The model is not valid
estim <- Arima(y_diff,c(0,0,2)); arimafit(estim) # OK:The model is well adjusted and valid
ma2 <- estim
estim <- Arima(y_diff,c(1,0,1)); arimafit(estim) # OK:The model is well adjusted and valid
ar1ma1 <- estim
estim <- Arima(y_diff,c(1,0,2)); arimafit(estim) # Nope:The model is not properly adjusted
estim <- Arima(y_diff,c(2,0,1)); arimafit(estim) # Nope:The model is not properly adjusted
estim <- Arima(y_diff,c(2,0,2)); arimafit(estim) # OK:The model is well adjusted and valid
ar2ma2 <- estim
### Compute the AIC BIC matrix of valid models #####
models <- c("ar2","ma2",'ar1ma1',"ar2ma2"); names(models) <- models
### Compute the AIC BIC matrix of valid models #####
models <- c("ar2","ma2",'ar1ma1',"ar2ma2"); names(models) <- models
apply(as.matrix(models),1, function(m) c("AIC"=AIC(get(m)), "BIC"=BIC(get(m))))
#plotting the corrected series and its modelisation
plot(ar2$x, col = "red")
lines(fitted(ar2), col = "blue")
graphics.off() #cleaning the graph window
#plotting the corrected series and its modelisation
plot(ar2$x, col = "red")
lines(fitted(ar2), col = "blue")
#fitting the ARIMA(2, 1, 0) to the initial series
estim <- Arima(y_num,c(2,1,0)); arimafit(estim) # OK:The model is well adjusted and valid
ar2i1ma0 <- estim
#plotting the initial series and its modelisation
plot(ar2i1ma0$x, col = "red")
lines(fitted(ar2i1ma0), col = "blue")
#plotting the initial series and its modelisation
plot(ar2i1ma0$x, col = "red")
lines(fitted(ar2i1ma0), col = "blue")
graphics.off()
obj <-forecast(ar2, h = 2, level = 95)
autoplot(obj, 50)
?forecast(ar2)
axis(1, at = c(350, 360, 370, 380, 390, 400))
checkresiduals(ar2)
qqnorm(ar2$residuals, pch = 1, frame = FALSE)
qqline(my_data$len, col = "steelblue", lwd = 2)
qqlinear2$residuals, col = "steelblue", lwd = 2)
qqline(ar2$residuals, col = "steelblue", lwd = 2)
dates2 <-append(dates, c(as.yearmon(2023+1/12), as.yearmon(2023+2/12)))
plot(ar2 %>% forecast(h=2, , level = c(95)), xlim=c(350 , 405), ylim = c(-75,75), main = "", ylab = "Production Index", xaxt = "n")
#plotting the corrected series and its modelisation
plot(ar2$x, col = "red")
lines(fitted(ar2), col = "blue")
graphics.off() #cleaning the graph window
plot(ar2 %>% forecast(h=2, , level = c(95)), xlim=c(150 , 174), ylim = c(-10,10), main = "", ylab = "Production Index", xaxt = "n")
95
plot(ar2 %>% forecast(h=2, , level = c(95)), xlim=c(150 , 174), ylim = c(-10,10), main = "", ylab = "Production Index", xaxt = "n")
axis(1, at = c(150, 160, 170))
#plotting the initial series and its modelisation
plot(ar2i1ma0$x, col = "red")
#fitting the ARIMA(2, 1, 0) to the initial series
estim <- Arima(y_num,c(2,1,0)); arimafit(estim) # OK:The model is well adjusted and valid
ar2i1ma0 <- estim
#plotting the corrected series and its modelisation
plot(ar2$x, col = "red")
lines(fitted(ar2), col = "blue")
forecast_result <- ar2 %>% forecast(h = 2, level = c(95))
forecast_result
plot(forecast_result, xlim = c(150, 174),
ylim = c(-10, 10), main = "", ylab = "Production Index", xaxt = "n")
plot(forecast_result,
ylim = c(-10, 10), main = "", ylab = "Production Index", xaxt = "n")
plot(forecast_result, xlim = c(0, 250),
ylim = c(-10, 10), main = "", ylab = "Production Index", xaxt = "n")
plot(forecast_result, xlim = c(0, 1000),
ylim = c(-10, 10), main = "", ylab = "Production Index", xaxt = "n")
plot(forecast_result,
ylim = c(-10, 10), main = "", ylab = "Production Index", xaxt = "n")
plot(forecast_result, xlim = c(length(ar2$x) - 25, length(ar2$x) + 2),
ylim = c(-10, 10), main = "", ylab = "Production Index", xaxt = "n")
plot(forecast_result, xlim = c(length(ar2$x) - 25, length(ar2$x) + 2),
ylim = c(-10, 10), main = "", ylab = "Production Index", xaxt = "n")
axis(1, at = c(length(ar2$x) - 25, length(ar2$x), length(ar2$x) + 2))
axis(1, at = seq(max(time(ar2$x)) - 5, max(time(ar2$x)), by = 1))
plot(forecast_result, xlim = c(max(time(ar2$x)) - 25, max(time(ar2$x))),
ylim = c(-10, 10), main = "", ylab = "Production Index", xaxt = "n")
axis(1, at = seq(max(time(ar2$x)) - 5, max(time(ar2$x)), by = 1))
plot(forecast_result, xlim = c(max(time(ar2$x)) - 5, max(time(ar2$x))),
ylim = c(-10, 10), main = "", ylab = "Production Index", xaxt = "n")
axis(1, at = seq(max(time(ar2$x)) - 5, max(time(ar2$x)), by = 1))
axis(1, at = seq(max(time(ar2$x)) - 3, max(time(ar2$x)), by = 1))
plot(forecast_result, xlim = c(max(time(ar2$x)) - 3, max(time(ar2$x))),
ylim = c(-10, 10), main = "", ylab = "Production Index", xaxt = "n")
axis(1, at = seq(max(time(ar2$x)) - 3, max(time(ar2$x)), by = 1))
5
5
plot(forecast_result, xlim = c(max(time(ar2$x)) - 5, max(time(ar2$x))),
ylim = c(-10, 10), main = "", ylab = "Production Index", xaxt = "n")
axis(1, at = seq(max(time(ar2$x)) - 5, max(time(ar2$x)), by = 1))
c(max(time(ar2$x)) - 5, max(time(ar2$x))
len(c(max(time(ar2$x)) - 5, max(time(ar2$x)))
c(max(time(ar2$x)) - 5, max(time(ar2$x))$len
c(max(time(ar2$x)) - 5, max(time(ar2$x)))$len
c(max(time(ar2$x)) - 5, max(time(ar2$x)))$len
c(max(time(ar2$x)) - 5, max(time(ar2$x)))
len(c(max(time(ar2$x)) - 5, max(time(ar2$x))))
r = c(max(time(ar2$x)) - 5, max(time(ar2$x)))
length(c(max(time(ar2$x)) - 5, max(time(ar2$x))))
axis(1, at = c("nov 2018", "sep 2019" ,"jul 2020", "mai 2021" ,"mar 2022", "jan 2023"))
plot(forecast_result, xlim = c(max(time(ar2$x)) - 5, max(time(ar2$x))),
ylim = c(-10, 10), main = "", ylab = "Production Index", xaxt = "n")
axis(1, at = c("nov 2018", "sep 2019" ,"jul 2020", "mai 2021" ,"mar 2022", "jan 2023"))
# Define your custom date labels
custom_dates <- c("2018-11-01", "2019-09-01", "2020-07-01", "2021-05-01", "2022-03-01", "2023-01-01")
# Convert the date labels to Date format
custom_dates <- as.Date(custom_dates)
# Set the custom tick positions and labels on the x-axis
axis(1, at = custom_dates, labels = format(custom_dates, "%b %Y"))
# Set the custom tick positions and labels on the x-axis
axis(1, at = custom_dates, labels = format(custom_dates, "%b %Y"))
plot(forecast_result, xlim = c(max(time(ar2$x)) - 5, max(time(ar2$x))),
ylim = c(-10, 10), main = "", ylab = "Production Index", xaxt = "n")
# Define your custom date labels
custom_dates <- c("2018-11-01", "2019-09-01", "2020-07-01", "2021-05-01", "2022-03-01", "2023-01-01")
# Define your custom date labels
custom_dates <- c("2018-11-01", "2019-09-01", "2020-07-01", "2021-05-01", "2022-03-01", "2023-01-01")
# Convert the date labels to Date format
custom_dates <- as.Date(custom_dates)
# Set the custom tick positions and labels on the x-axis
axis(1, at = custom_dates, labels = format(custom_dates, "%b %Y"))
seq(max(time(ar2$x)) - 5, max(time(ar2$x)), by = 1)
axis(1, at = seq(max(time(ar2$x)) - 5, max(time(ar2$x)), by = 1))
axis.Date(1, at = custom_dates, format = "%b %Y")
axis(1, at = seq(max(time(ar2$x)) - 5, max(time(ar2$x)), by = 1))
axis.Date(1, at = custom_dates, format = "%b %Y")
# Set the plot range and other parameters
plot(forecast_result, xlim = c(max(time(ar2$x)) - 5, max(time(ar2$x))), ylim = c(-10, 10), main = "", ylab = "Production Index")
# Create a sequence of dates for custom x-axis tick positions
custom_dates <- seq.Date(max(time(ar2$x)) - 5, max(time(ar2$x)), by = "1 month")
qqnorm(ar2$residuals, pch = 1, frame = FALSE)
qqline(ar2$residuals, col = "steelblue", lwd = 2)
shapiro.test(ar2$residuals)
forecast_result
